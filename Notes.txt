* Typescript Notes *

**** SECTION 1 : GETTING STARTED  **** **** **** **** **** **** 
* What is Typescript ?
-> A Javascript Superset : A language building up on Javascript
-> Adds new features + Advantages to Javascript
-> Browser CAN'T execute it!
-> TS -CompiledTo--> JS
-> Features are compiled to JS "workarounds", possible errors are thrown

* Why Typescript ?
function add(num1, num2) {
    return num1 + num2;
}

console.log(add("2","3"));
--> Unwanted Behavior at Runtime -> Mitigation Strategies : Add if check to add function Validate & sanitize user input
--> Developers can still write invalid code -> TS is a "Tool" that helps developers write better code!


* Installing & Using TypeScript
npm install -g typescript

-> create "using-ts.ts" file
-> copy that code and make some changes add types
var button = document.querySelector("button")!;
var input1 = document.getElementById("num1")! HTMLInputElement;
var input2 = document.getElementById("num2")! HTMLInputElement;
function add(num1: number, num2: number) {
    return num1 + num2;
}
button.addEventListener("click", function () {
    console.log(add(+input1.value, +input2.value));
});

* TypeScript Overview 
-> TS adds "Types!"
-> Next-gen JS Features (compiled down for older Browsers)
-> Non-JS Features like Interface or Generics
-> Meta-Programming Features like Decorators
-> Rich Configuration Options
-> Modern Tooling that helps even in non-TypeScript Projects

**** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****

**** SECTION 2 : TYPESCRIPT BASICS & BASIC TYPES  **** **** **** **** **** ****
* Core Types *
-> number : 1, 5.3, -10 
-> string "Hi", 'Hi' : All text values
-> boolean : true, false : just these two, no "truthy" or "falsy" values

function add(n1: number, n2: number) {
    return n1 + n2;
}

const number1 = '5';
const number2 = 2.8;

const result = add(number1, number2);
console.log(result);

-> TypeScript's type system only helps you during development
(before the code gets compiled)

* Typescript Types vs Javascript Types
-> The key differences is: Javascript uses "dynamic types"(resolved at runtime)
-> TypeScript uses "static types" (set during development)

* Working with Numbers, Strings & Booleans
function add(n1: number, n2: number, showResult: boolean, phase: string) {
    const result = n1 + n2;
    if(showResult) {
        console.log(phase + result);
    }else {
        return result;
    } 
}

const number1 = 5;
const number2 = 2.8;
const printResult = true;
const resultPhase = 'Result it : ';

add(number1, number2, printResult, resultPhase);


* Type Assignment & Type Inference
let number1: number;
number1 = 5;
const number2 = 2.8;

// Incorrect
let resultPhase = 'Result it : ';
resultPhase = 0;

* Core Types *
-> object : {age: 30} Any JavaScript object, more specific types are possible
const person: {
    name: string;
    age: number;
} = {
    name: "Vedat",
    age: 21
}

* Core Types *
-> Array: [1,2,3] Any JavaScript array, type can be flexible or strict (regarding the element type)
const person = {
    name: "Vedat",
    age: 21,
    hobbies: ['Sports', 'Cooking']
}

let favouriteActivities: string[];
favouriteActivities = ['Sports', 2]; // Error

for(const hobby of person.hobbies) {
    console.log(hobby.toUpperCase());
    console.log(hobby.map()); // Error
}

* Core Types *
-> Tuple: [1,2] Fixed-length array where the type of the elements is known, but need not be the same
const person: {
    name: string;
    age: number;
    hobbies: string[];
    role: [number, string];
} = {
    name: "Vedat",
    age: 21,
    hobbies: ['Sports', 'Cooking'],
    role: [2, 'author']
}

person.role.push('admin'); // Error
person.role[1] = 10; // Error

-> Tuple is not flexible as Array, it is fixed length and fixed type

* Core Types *
-> Enum: enum {NEW, OLD} Enum : Automatically enumerated global constant identifiers
const enum Role {
    ADMIN = 6,
    READ_ONLY,
    AUTHOR = 'AUTHOR'
}

const person = {
    name: "Vedat",
    age: 21,
    hobbies: ['Sports', 'Cooking'],
    role: Role.ADMIN
}

if(person.role === Role.ADMIN) {
    console.log('is admin');
}

* Core Types *
-> Any: * Avoid using "any" because it disables TS's powerful checks
-> Use it when you don't know the type of the value
-> Any is turning off TS checks and go back to JS world

* Core Types *
-> Union: Combine multiple types
-> You can be more flexible regarding the types of the values you're working with
-> Use it when you don't know the type of the value

function combine(input1: (number | string), input2: (number | string)) {
    let result;

    if(typeof input1 === 'number' && typeof input2 === 'number') {
        const result = input1 + input2;
        return result;
    }else {
        result = input1.toString() + input2.toString();
    }

    return result;
}

const combinedAges = combine(30, 26);
console.log(combinedAges);

const combinedNames = combine("Max", "Anna");
console.log(combinedNames);


* Core Types *
-> Literal Types: Combine types with specific values
-> Use it when you want to restrict the values to a specific set of values

function combine(
    input1: (number | string),
    input2: (number | string),
    resultConversion: 'as-text' | 'as-number'
) {
    let result;

    if(typeof input1 === 'number' && typeof input2 === 'number' || resultConversion === 'as-number') {
        const result = +input1 + +input2;
        return result;
    }else {
        result = input1.toString() + input2.toString();
    }
    return result;

    /*if(resultConversion === 'as-number') {
        return +result;
    }else {
        return result.toString();
    }*/
}

const combinedAges = combine(30, 26, 'as-number');
console.log(combinedAges);

const combinedStringAges = combine('30', '26', 'as-number');
console.log(combinedStringAges);

const combinedNames = combine("Max", "Anna", 'as-text');
console.log(combinedNames);

* Core Types *
-> Aliases: Create your own types
-> Use it when you want to use a type more than once and you want to give it a more descriptive name

type Combinable = number | string;
type ConversionDescriptor = 'as-number' | 'as-text';

function combine(
    input1: Combinable,
    input2: Combinable,
    resultConversion: ConversionDescriptor
) {

* Core Types *
-> Functions & Function Types
-> void is a valid type in TS
-> Use it when you don't want to return anything from a function
--> undefined is same as void but it expects a return value

function add(n1: number, n2: number): number {
    return n1 + n2;
}

function printResult(num: number): void {
    console.log('Result: ' + num);
}

printResult(add(5, 12));

* Functions as Types *
function add(n1: number, n2: number): number  {
    return n1 + n2;
}

function printResult(num: number): void {
    console.log('Result: ' + num);
}

printResult(add(5, 12));

//let combineValues: Function;
//let combineValues: () => number;
let combineValues: (a: number, b: number) => number;
combineValues = add;
//combineValues = 5; --> Error
//combineValues = printResult; --> Error

console.log(combineValues(8, 8));


//let someValue: undefined;

// console.log(printResult(add(5, 12))); --> undefined

* Function Types & Callbacks *
function addAndHandle(n1: number, n2: number, cb: (num: number) => void) {
    const result = n1 + n2;
    cb(result);
}

addAndHandle(10, 20, (result) => {
    console.log(result);
});

* Unknown & Never *
-> Unknown: Better than any | Use it when you don't know the type of the value | It is more restrictive than any
-> Never: Use it when you never expect a function to return anything

** My Own Questions **
- What is Callback Function ?
-> In TS, a callback function is simple a function that is passed as an argument to another function and
is intended to be called at a later time.
-> Usally after some asynchronous operation completed or under certain conditions.
-> Callback functions are commonly used in scenerios like event handling, async programming, and functional programming

Basic example:

function process(callback: () => void) {
    console.log('Processing...');
    setTimeout(() => {
        callback();
    }, 2000);
}

function callbackFunction() {
    console.log('Callback function called!');
}

process(callbackFunction);

************************************************************************************************************

**** SECTION 3 : COMPILING & CONFIGURING TYPESCRIPT **** **** **** **** **** ****
* Using Watch Mode
> tsc app.ts -w

* Compiling the Entire Project & Multiple Files
> tsc --init
- It creates a tsconfig.json file
- It is a configuration file for the TypeScript compiler
- It allows you to configure the compiler and the compilation process
- It is a JSON file
-> now you use tsc -w for compiling all files
> tsc

* Including & Excluding Files
-> You can specify which files should be included or excluded from the compilation process
-> You can use the "files" property to specify the files to be included
-> You can use the "exclude" property to specify the files to be excluded
-> Open tsconfig.json file and add the following code
{
    ....
    "include": ["app.ts"],
    "exclude": ["node_modules", "analytics.ts"]
}
-> From now on, only app.ts will be compiled and analytics.ts will be excluded
> tsc
-> Now, only app.ts will be compiled
-> If you dont want to add all files ends with .dev.ts
-> You can use "exclude" property like this
{
    ....
    "exclude": ["*.dev.ts"]
}
-> If you dont want to exclude all files ends with .dev.ts in the subfolders
-> You can use "exclude" property like this
{
    ....
    "exclude": ["**/*.dev.ts"]
}

-> For including all files in the subfolders
{
    ....
    "include": ["src/**/*.ts"]
}

* Setting up a Compilation Target
-> You can specify the ECMAScript version you want to target
-> You can use the "target" property to specify the ECMAScript version
-> const is not supported in ES5
-> Open tsconfig.json file and add the following code
{
    ....
    "target": "es5",
}
-> Target is the version of ECMAScript you want to compile your code to

{
    ....
    "target": "es6",
}

* Understanding Core TypeScript Libs
-> You can specify the core TypeScript libraries you want to include
-> You can use the "lib" property to specify the core TypeScript libraries
-> Open tsconfig.json file and add the following code
{
    ....
    "lib": ["DOM", "ES6", "DOM.Iterable", "ScriptHost"]
}
-> The "lib" property is used to specify the core TypeScript libraries you want to include
-> The "DOM" library is used to include the DOM library
-> The "ES6" library is used to include the ES6 library
-> The "DOM.Iterable" library is used to include the DOM.Iterable library
-> The "ScriptHost" library is used to include the ScriptHost library
-> Default "lib" property contains a lot of libraries like Map, Set, Promise, etc.

* More Configuration & Compilation Options
-> jsx : Specify the JSX code generation
-> declaration : Generate corresponding .d.ts files

* Working with Source Maps
-> If we want to see the original TypeScript code in the browser we can use source maps true
-> You can use the "sourceMap" property to generate source maps
-> Open tsconfig.json file and add the following code
{
    ....
    "sourceMap": true
}

* rootDir and outDir
-> outDir is the directory where the compiled files will be placed
-> rootDir is the directory where the TypeScript files are located
-> You can use "src" and "dist" folders where src will be rootDir and dist will be outDir
-> Open tsconfig.json file and add the following code
{
    ....
    "rootDir": "src",
    "outDir": "dist"
}

* Stop Emitting Files on Compilation Errors
"noEmitOnError": false,
-> If there is compilation errors, when you compile that file it will emit the file
-> But if its true, it will not emit the file to the dist folder


**** SECTION 4: TypeScript & Modern Javascript  **** **** **** **** **** ****
* let and const
-> let is not accessible outside of the block scope
-> var is accessible outside of the block scope

* Arrow Function
const add = (a: number, b: number): number => a + b;

const printOutput: (a: number | string) => void = output => console.log(output);

const button = document.querySelector('button');

if(button) {
    button.addEventListener('click', event => console.log(event));
}

//console.log(add(2, 5));
printOutput(add(2, 5));


* Default Function Parameters
-> Default function parameters must be end of the list like a cannot have default parameter
const add = (a: number, b: number = 1): number => a + b;

....

printOutput(add(5));


* The Spread Operator (...)
onst activeHobbies = ['Hiking'];

activeHobbies.push(...hobbies);

console.log(activeHobbies);


const person = {
    name: "Vedat",
    age: 22
};

const copiedPerson = {...person};

console.log(copiedPerson);


* Rest Parameters
// add function parameters will be number array but we dont know the size
const add = (...numbers: number[]) => {
    
    return numbers.reduce((curResult, curValue) => {
        return curResult + curValue;
    }, 0);
    
}

const addedNumbers = add(5, 10, 2);

console.log(addedNumbers);


// If we will get 3 number, we could use "Tuple"
const add = (...number: [number, number, number]) => {
    ...
}

const addedNumbers = add(5, 10, 2);

...

* Array & Object Destructuring
const hobbies = ['Sports', 'Hiking'];
const person = {
    fName: "vedat",
    age: 22
}


const hobby1 = hobbies[0];
const hobby2 = hobbies[1];

or 

const [hobby1, hobby2, ...remaniningHobbies] = hobbies;

console.log(hobbies, hobby1, hobby2)


const {fName: userName, age} = person;

console.log(fName: userName, age, person);



**** SECTION 5 : CLASSES & INTERFACES **** **** **** **** **** **** 
- What is Object-Oriented Programming (OOP) ?
-> Work with (real-life) Entities in your Code
-> ProductList : Renders a list of products which were fetched from a db | Object holds rendering + fetching logic
-> Product : Renders details about a product and allows addition to cart | Object holds rendering + cart-adding logic
-> ShoppingCart : Renders cart products and total and allows user to order them | Object holds rendering + ordering logic

- Classed & Instances
-> Objects :
- "The things you work with in code"
- Instances of classes
- Class-based creation is an alternative to using object literals

-> Classes : 
- "Blueprints for objects"
- Define how objects look like, which properties and methods they have
- Classes make creation of multiple, similar objects much easier


* Creating a First Class
class Department {
    name: string;

    constructor(n: string) {
        this.name = n;
    }

}

const accounting = new Department('Accounting')

console.log(accounting);



* Constructor Functions & The "this" Keyword
class Department {
    name: string;

    constructor(n: string) {
        this.name = n;
    }

    describe(this: Department): void {
        console.log(`Department ${this.name}`)
    }

}

const accounting = new Department('Accounting')

accounting.describe();

console.log(accounting);

const accountingCopy = { name: 'DUMMY', describe: accounting.describe };

accountingCopy.describe(); // Department undefined



* Private and Public Access Modifiers 
class Department {
    name: string;
    private employees: string[] = [];
    .....

const accounting = new Department('Accounting')

...

accounting.addEmployee('Max');
accounting.addEmployee('Manu');

// accounting.employees[2] = 'Anna'; // This is not allowed because employees is private

accounting.printEmployeeInformation();

console.log(accounting);

* Shorthand Initialization
class Department {
    /* private id: string;
    public name: string; */
    private employees: string[] = [];

    constructor(private id: string, public name: string) {
        /* 
            this.name = n;
            this.id = id; 
        */
    }

    describe(this: Department): void {
        console.log(`Department (${this.id}) ${this.name}`)
    }

...

const accounting = new Department('d1', 'Accounting')


* "readonly" Properties
-> When you initialize that property, you cannot change after

class Department {
    constructor(private readonly id: string, public name: string) {

    }
    .
    ..

    addEmployee() {
        ....
        // this.id = 'd2'; // This is not allowed because id is readonly
    }
}


* Inheritance
class Department {
    private employees: string[] = [];

    constructor(private readonly id: string, public name: string) {
        /* this.name = n;
        this.id = id; */
    }

    describe(this: Department): void {
        console.log(`Department (${this.id}) ${this.name}`)
    }

    addEmployee(employee: string) {
        this.employees.push(employee);
    }

    printEmployeeInformation() {
        console.log(this.employees);
    }

}

class ITDerpartment extends Department {
    public admins: string[];
    
    constructor(id: string, admins: string[]) {
        super(id, 'IT');
        this.admins = admins;
    }
}

class AccountingDepartment extends Department {
    constructor(id: string, private reports: string[]) {
        super(id, 'Accounting');
    }

    addReports(text: string) {
        this.reports.push(text);
    }

    printReports() {
        console.log(this.reports);
    }
}




const itDept = new ITDerpartment('d1', ['Vedat'])
const accountingDept = new AccountingDepartment('d2', [])


itDept.addEmployee('Max');
itDept.addEmployee('Manu');

accountingDept.addReports('Something went wrong...');
accountingDept.printReports();

itDept.describe();

itDept.printEmployeeInformation();

console.log(itDept);


* Overriding Properties & The "protected" Modifier
-> private is not accessible from extended child 
-> protected is accessible from child classes
class Department {
    protected employees: string[] = [];
}

* Getters & Setters
class AccountingDepartment extends Department {
    private lastReport: string;

    get mostRecentReport() {
        if(this.lastReport) {
            return this.lastReport;
        }
        throw new Error('No report found.');
    }

    set mostRecentReport(value: string) {
        if(!value) {
            throw new Error('Please pass in a valid value!');
        }
        this.addReports(value);
    }

    constructor(id: string, private reports: string[]) {
        super(id, 'Accounting');
        this.lastReport = reports[0];
    }


* Static Methods & Properties
-> In TypeScript, static properties and methods belong to the class itself rather than to instances of the class
-> They are declared using the 'static' keyword
-> Static properties are shared among all instances of the class and can be accessed without creating an instance of the class

-> Static Properties : 
class MyClass {
    static myStaticProperty: number = 10;
}

console.log(MyClass.myStaticProperty); // Result: 10

-> Static Methods : 
class MyClass {
    static myStaticMethod() {
        console.log('This is a static method');
    }
}

MyClass.myStaticMethod(); // Output: This is a static method

-> Static properties and methods are useful for creating utility functions, managing shared resources, or defining constants that 
are common to all instances of a classs


* Abstract Classes
-> In TypeScript, abstract classes and methods provide a way to define blueprint for other classes
-> Abstract classes cannot be instantiated directly; they exists primarily for inheritance purpose

-> Abstract Class : 
abstract class Animal {
    abstract makeSound(): void;

    move(): void {
        console.log('Moving...');
    }
}


-> Abstract Method
abstract class Animal {
    abstract makeSound(): void;
}


-> Inheriting from Abstract Class
class Dog extends Animal {
    makeSound(): void {
        console.log('Woof! Woof!');
    }
}

const dog = new Dog();
dog.makeSound(); // Woof! Woof!
dog.move(); // Moving...


* Singleton & Private Constructors
-> A singleton pattern is a design pattern that ensures a class has only one instance and provides a global point of access to that instance
-> In TS, you can implement the "Singleton Pattern" using a combination of a private constructor and a static method to access the single instance
-> 1. Private Constructor: By making constructor private, you prevent the class from being instantiated from outside the class itself
-> 2. Static Method: You provide a static method that allows access to the single instance of the class. This method checks if an instance already exists



* INTERFACES
-> In TypeScript, interfaces are a powerful way to define contracts within you code 
-> They allow you to define the structure of objects, including their properties and methods, without providing an implementation
-> Interfaces are primarly used for type-checking and to enforce consistency across different parts of your codebase



* Extends Interfaces
-> In TypeScript, interfaces can extend other interfaces, similar to how classes can extend other classes
-> When an interface extends another interface, it inherits all the members of the parent interface while also allowing the child interface to define
additional members.

interface ParentInterface {
    // Properties and methods
}

interface ChildInterface extends ParentInterface {
    // Additional properties and methods....
}

interface Shape {
    color: string;
}

interface Circle extends Shape {
    radius: number;
    calculateArea(): number;
}

class CircleImp1 implements Circle {
    constructor(public color: string, public radius: number) {}

    calculateArea(): number {
        return Math.PI * this.radius ** 2;
    }
}

const myCircle = new CircleImp1('red', 5);
console.log(myCircle.calculateArea());
console.log(myCircle.color);
console.log(myCircle.radius);


-> The 'Shape' interface defines a 'color' property
-> The 'Circle' interface extends the 'Shape' interface and adds a 'radius' property and a 'calculateArea' method
-> The 'CircleImp1' class implements 'Circle' interface, providing implementations for the 'color', 'radius' and 'calculateArea' members


interface Named {
    readonly  name: string;
}

interface Greetable extends Named, AnotherInterface { 
    readonly name: string;

    greet(phase: string): void;
};

class Person implements Greetable {
    //name: string;
    age = 30;

    constructor(name: string) {
        this.name = name;
    }

    greet(phase: string) {
        console.log(phase + ' ' + this.name);
    }
}



let user1: Greetable;

user1 = new Person('Vedat');
//user1.name = 'Another'; // Cannot assign to 'name' because it is a read-only property
console.log(user1);

user1.greet('Hi there - I am');




* Interfaces as Function Types
-> You can describe the shape of a function using an interface, specifying the types of its parameters and its return type
-> This enables you to enforce a contract for functions and provides type safety when working with functions

interface FunctionInterface {
    (param1: type1, param2: typ2, ...): returnType;
}


interface MathOperation {
    (num1: number, num2: number): number;
}

const add: MathOperation = (a, b) => a + b;
const subtract: MathOperation = (a, b) => a - b;

console.log(add(5,3))
console.log(subtract(5,3))
----------------------------------------------------------------------------------------------------
interface AddFn {
    (a: number, b: number): number;
}

let add: AddFn;

add = (n1: number, n2: number) => {
    return n1 + n2;
}


* Optional Parameters & Properties
-> use ? for optional parameters and methods

interface Named {
    readonly name?: string;
    outputName?: string;
}

interface Greetable extends Named { 
    //readonly name?: string;

    greet(phase: string): void;
};

class Person implements Greetable {
    name?: string;
    age = 30;

    constructor(n?: string) {
        if(n) {
            this.name = n;
        }
    }

    greet(phase: string) {
        if(this.name) {
            console.log(phase + ' ' + this.name);
        }else {
            console.log('Hi');
        
        }
    }
}


let user1: Greetable;
let user2: Greetable;

user1 = new Person();
user2 = new Person('Vedat');
console.log(user1);

user1.greet('Hi there - I am'); // Hi 
user2.greet('Hi there - I am'); // Hi there - I am Vedat

**** SECTION 6 : ADVANCED TYPES **** **** **** **** **** ****
* Intersection Types | Type Guards | Discriminated Unions | Type Casting | Function Overloads

* Intersection Types
-> Intersection types in TypeScript allow you to combine multiple types into one
-> This means if you have two or more types, you can create a new type that has all the properties and
methods of the original types

For example :

interface Dog {
    bark(): void;
    run(): void;
}

interface Robot {
    compute(): void;
    run(): void;
}

-> You can create a new type that represents something with both dog and robot capabilities using intersection types :

type DogRobot = Dog & Robot;

-> Now, DogRobot has all the properties and methods of both Dog and Robot.
-> You can create an object of type DogRobot and use both bark() and compute() methods:

const myPet: DogRobot = {
    bark() {
        console.log("Woof!");
    },
    run() {
        console.log("Running...");
    },
    compute() {
        console.log("Computing...");
    },
    move() {
        console.log("Moving...");
    }
};

myPet.bark();
myPet.compute();


* More on Type Guards
function add(a: Combinable, b: Combinable) {
    if(typeof a === 'string' || typeof b === 'string') {
        return a.toString() + b.toString();
    }
    return a + b;
}

type UnknownEmployee = Employee | Admin;

function printEmployeeInformation(emp: UnknownEmployee) {
    console.log('Name: ' + emp.name);
    if('privileges' in emp) {
        console.log('Privileges: ' + emp.privileges);
    }
    if('startDate' in emp) {
        console.log('Start Date: ' + emp.startDate);
    }
}
----------------------------------------------------------------------------------------------------
class Car {
    drive() {
        console.log('Driving...');
    }
}

class Truck {
    drive() {
        console.log('Driving a truck...');
    }

    loadCargo(amount: number) {
        console.log(`Loading cargo ...${amount}`);
    }
}

type Vehicle = Car | Truck;
// Vehicle could be Car or Truck
const v1 = new Car();
const v2 = new Truck();

function useVehicle(vehicle: Vehicle) {
    vehicle.drive();
    // For checking if vehicle has loadCargo method
    /*if('loadCargo' in vehicle) {
        vehicle.loadCargo(1000);
    * */
    if(vehicle instanceof Truck) {
        vehicle.loadCargo(1000);
    }
}

useVehicle(v1);
useVehicle(v2);

* Discriminated Unions
-> Discriminated unions, also known as tagged unions or algebraic data types, are a powerful feature in TypeScript
that allows you to work with values that could be one of several types, while still maintaining type safety
-> They're particularly useful when dealing with complex data structures or modeling different variations of a concept

interface Square {
    kind: 'square';
    size: number;
}

interface Rectangle {
    kind: 'rectangle';
    width: number;
    height: number;
}

interface Circle {
    kind: 'circle';
    radius: number;
}

type Shape = Square | Rectangle | Circle;

function area(shape:Shape) {
    switch(shape.kind) {
        case 'square':
            return shape.size * shape.size;
        case 'rectangle':
            return shape.width * shape.height;
        case 'circle':
            return Math.PI * shape.radius ** 2;
    }
}

-> Benefits of Discriminated Unions : Discriminated unions provide type safety by ensuring that you handle
all possible cases. If you try to access a property that doesn't exist on a certain type within the union,
TypeScript will raise an error. They also make the code more readable and maintainable by clearly defining the different
variations of a type

interface Bird {
    type: 'bird';
    flyingSpeed: number;
}

interface Horse {
    type: 'horse';
    runningSpeed: number;
}

type Animal = Bird | Horse;

function moveAnimal(animal: Animal) {
    let speed;
    switch(animal.type) {
        case 'bird':
            speed = animal.flyingSpeed;
            break;
        case 'horse':
            speed = animal.runningSpeed;
            break;
    }
    console.log('Moving at speed: ' + speed);
}

moveAnimal({type: 'bird', flyingSpeed: 10});
moveAnimal({type: 'horse', runningSpeed: 20});

* Type Casting
//const userInputElement = <HTMLInputElement>document.getElementById('user-input')!;
const userInputElement = document.getElementById('user-input')! as HTMLInputElement;

userInputElement.value = 'Hi there!';



* Index Properties
- Index properties, also known as index signatures, allow you to define types that represent objects with a dynamic
set of properties whose names are not known upfront but follow a specific pattern
- They are particularly useful when you want to define types for objects that contain arbitrary or dynamic keys
interface ErrorContainer {
    //id: string;
    [prop: string]: string;
}

const errorBag: ErrorContainer = {
    //id: 'e1',
    email: 'Not a valid email!',
    username: 'Must start with a capital character!'
}

* Function Overloads
-> Function overloads in TS allow you to define multiple function signatures for a single function implementation
-> This features enables TypeScript to provide more accurate type checking and inference when calling the function
with different argument types or numbers

type Combinable = string | number;

function add(a: number, b: number): string;
function add(a: string, b: string): string;
function add(a: Combinable, b: Combinable) {
    if(typeof a === 'string' || typeof b === 'string') {
        return a.toString() + b.toString();
    }
    return a + b;
}

const res1 = add(1, 5);

const res2 = add('Vedat', 'Cinbat');

res1.split(' '); // This is not allowed because res1 is a number
res2.split(' '); // This is allowed because res2 is a string

-> If we didnt overload the function, res1 and res2 would be Combinable type and ts will count res1 and res2 as Combinable type : string | number
-> And split method will not be available for res1 and res2

* Optional Chaining
const fetchedUserData = {
    id :'u1',
    name: 'Vedat',
    //job: {title: 'CEO', description: 'My own company'}
}

//console.log(fetchedUserData.job && fetchedUserData.job.title);

console.log(fetchedUserData?.job?.title);


* Nullish Coalescing
-> If the value is null or undefined, it will return the right side value

const userInput = null;

const storedData = userInput ?? 'DEFAULT';

console.log(storedData);

-> This will return 'DEFAULT' because userInput is null
-> If userInput is null or undefined, storedData will be 'DEFAULT'

**** SECTION 7 : GENERICS **** **** **** **** **** ****
- What | Generic Functions & Classes | Constraints | Special TS Types

* Built-in Generics & What are Generics ?
-> In TypeScript, generics provide a way to create reusable components that can work iwht a variety
of data types while still maintaining type safety
-> Generics allow you to define placeholders for types that are specified when the component or function is used

For example :
function reverseArray(array: any[]): any[] {
    return array.reverse();
}

-> This function works for arrays of any type, but it doesn't provide type safety
-> If you pass an array of numbers to it, you'll get back an array of numbers, but if you pass
an array of strings, you'll get back an array of strings.
-> With generics, you can make this function type-safe :
function  reverseArray<T>(array: T[]): T[] {
    return array.reverse();
}

const names: Array<string> =  [];

//names[0].split(' ');

const promise: Promise<number> = new Promise((resolve, reject) => {
    setTimeout(() => {
        resolve(10);
    }, 2000)
})

promise.then((data) => {
    //data.split(' ')
})

* Creating Generic Function
function merge<T, U>(objA: T, objB: U) {
  // @ts-ignore
    return Object.assign(objA, objB);
}

const mergedObj =
    merge<{name: string, hobbies: string[]}, {age: number}>({ name: 'Max', hobbies: ['Sports'] }, { age: 30 });

console.log(mergedObj);

* Working with Constraints
function merge<T extends object, U extends object>(objA: T, objB: U) {
    return Object.assign(objA, objB);
}

* Another Generic Function
interface Lengthy {
    length: number;
}

function countAndDescribe<T extends Lengthy>(element: T): [T, string]{
    let descriptionText = 'Got no value';
    if(element.length === 1) {
        descriptionText = 'Got 1 element';
    }else if (element.length > 0) {
        descriptionText = 'Got ' + element.length + ' elements';
    }
    return [element, descriptionText];
}

console.log(countAndDescribe('Hi there!'));
console.log(countAndDescribe(['Sports', 'Cooking']));
console.log(countAndDescribe([]));
//console.log(countAndDescribe(10));

* The 'keyof' Constraint
function extractAndConvert<T extends object, U extends keyof T>(obj: T, key: U) {
    return 'Value: ' + obj[key];
}

console.log(extractAndConvert({name: 'Vedat'}, 'name')) // This works because name is a key of obj
//console.log(extractAndConvert({name: 'Vedat'}, 'age')) // This will not work because age is not a key of obj

* Generic Classes
-> Generics are used in various scenarios, such as creating reusable data structures like linked lists,
stacks, or queues, building flexible higher-order functions, and designing APIs that work with multiple
types while maintaining type safety.
-> They're particularly useful in scenarios where you want to write reusable and type-safe code that can work with different types

class DataStorage<T extends string | number | boolean> {
    private data: T[] = [];

    addItem(item: T) {
        this.data.push(item);
    }

    removeItem(item: T) {
        if(this.data.indexOf(item) === -1) {
            return;
        }
        this.data.splice(this.data.indexOf(item), 1);
    }

    getItems() {
        return [...this.data];
    }
}

const textStorage = new DataStorage<string>();
textStorage.addItem('Vedat');
textStorage.addItem('Ali');
textStorage.removeItem('Vedat');

console.log(textStorage.getItems());

const numberStorage = new DataStorage<number>();
numberStorage.addItem(1);
numberStorage.addItem(2);
numberStorage.removeItem(1);

console.log(numberStorage.getItems());

* Generic Utility Types
-> If you want to change in some point that temporarily your object has all optional properties, you can use Partial
Partial<Name>

interface CourseGoal {
    title: string;
    description: string;
    completeUntil: Date;
}

function createCourseGoal(title: string, description: string, date: Date): CourseGoal {
    let courseGoal: P> artial<CourseGoal= {}; // This is a partial object that has all properties of CourseGoal but all are optional

    courseGoal.title = title;
    courseGoal.description = description;
    courseGoal.completeUntil = date;

    return courseGoal as CourseGoal;
}

* Generic Types & Union Types


































######################################################################################
Author: Vedat Cinbat
Started: May 3, 2024

######################################################################################